name: Deploy to AWS

on:
  push:
    branches:
      - main  # Trigger the pipeline on main branch push

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.4.0"  # Use your desired Terraform version

      # Remove pre-existing AWS CLI installation and Install AWS CLI
      - name: Remove and Install AWS CLI
        run: |
          # Remove pre-existing AWS CLI installation if it exists
          if command -v aws &> /dev/null
          then
            echo "Removing pre-existing AWS CLI installation..."
            sudo rm -rf /usr/local/aws-cli
            sudo rm -rf /usr/local/bin/aws
          fi

          # Install AWS CLI
          echo "Installing AWS CLI..."
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      # Configure AWS credentials (set these in GitHub Secrets)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Verify AWS credentials
      - name: Verify AWS CLI Setup
        run: |
          aws sts get-caller-identity

      # Export AWS credentials explicitly for Terraform
      - name: Export AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV

  deploy-blue:
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.4.0"

      # Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Validate Terraform configuration
      - name: Validate Terraform Configuration
        run: terraform validate 
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}  

      - name: Export AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
          echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV  

      # Apply Terraform to deploy the blue environment
      - name: Deploy Blue Environment
        run: terraform apply -auto-approve -var="environment=blue"

      # Fetch the public IP dynamically
      - name: Get Public IP of Blue Environment
        id: get_blue_ip
        run: |
          echo "PUBLIC_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

      # Fetch the Load Balancer DNS Name dynamically
      - name: Get Load Balancer DNS
        id: get_lb_dns
        run: |
          echo "LOAD_BALANCER_DNS=$(terraform output -raw load_balancer_dns)" >> $GITHUB_ENV

      # Verify blue deployment using the public IP
      - name: Verify Blue Deployment
        run: |
          curl -f http://${{ env.PUBLIC_IP }}/index.html

  switch-to-green:
    runs-on: ubuntu-latest
    needs: deploy-blue
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.4.0"

      # Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Apply Terraform to switch to green environment
      - name: Switch to Green Environment
        run: terraform apply -auto-approve -var="environment=green"

      # Fetch the public IP of the green environment dynamically
      - name: Get Public IP of Green Environment
        id: get_green_ip
        run: |
          echo "GREEN_PUBLIC_IP=$(terraform output -raw instance_public_ip)" >> $GITHUB_ENV

      # Fetch the Load Balancer DNS Name for Green
      - name: Get Load Balancer DNS for Green
        id: get_green_lb_dns
        run: |
          echo "GREEN_LOAD_BALANCER_DNS=$(terraform output -raw load_balancer_dns)" >> $GITHUB_ENV

      # Verify green deployment using the green environment's public IP
      - name: Verify Green Deployment
        run: |
          curl -f http://${{ env.GREEN_PUBLIC_IP }}/index.html

  update-load-balancer:
    runs-on: ubuntu-latest
    needs: switch-to-green
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.4.0"

      # Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Apply Terraform to update load balancer to point to green environment
      - name: Update Load Balancer to Green
        run: terraform apply -auto-approve -var="switch_to_green=true"

      # Optionally, add a health check or verification here
      - name: Verify Load Balancer Update
        run: |
          curl -f http://${{ env.GREEN_LOAD_BALANCER_DNS }}/index.html
